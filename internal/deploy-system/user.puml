@startuml
namespace controller {
    class Controller << (S,Aquamarine) >> {
        + UserQuery *repository.Repository
        + Service *service.Service

        - injectQuery(getBean <font color=blue>func</font>(string) <font color=blue>interface</font>{}) 
        - injectService(getBean <font color=blue>func</font>(string) <font color=blue>interface</font>{}) 
        - injectRouting(getBean <font color=blue>func</font>(string) <font color=blue>interface</font>{}) 

        + GetByID(ctx *gin.Context) 
        + CreateUser(ctx *gin.Context) 
        + FindByName(ctx *gin.Context) 
        + ModifyUserRoleByID(ctx *gin.Context) 
        + ModifyUserStatusByID(ctx *gin.Context) 
        + ModifyUserPasswordByID(ctx *gin.Context) 
        + Inject(getBean <font color=blue>func</font>(string) <font color=blue>interface</font>{}) 

    }
    class FindByNameAndMobileQuery << (S,Aquamarine) >> {
        + Name string
        + ID types.Long
        + Mobile string
        + Enable int64

    }
    class FindByNameAndMobileResponse << (S,Aquamarine) >> {
        + Records []domain.User
        + Total int64

    }
}
"web.Controller" *-- "controller.Controller"
"types.Pagination" *-- "controller.FindByNameAndMobileQuery"


namespace domain {
    class ChangePasswordCommand << (S,Aquamarine) >> {
        + ID types.Long
        + Password string

    }
    class CreateUserCommand << (S,Aquamarine) >> {
        + Username string
        + Password string
        + Name string
        + Mobile string
        + Email string
        + Role enum.SysRole

        + ToUser() (*User, error)
        + Validate() error

    }
    class ModifyUserCommand << (S,Aquamarine) >> {
        + ID types.Long
        + Username string
        + Password string
        + Name string
        + Mobile string
        + Email string
        + Role enum.SysRole

        + Validate() error

    }
    class ModifyUserRoleCommand << (S,Aquamarine) >> {
        + ID types.Long
        + Role enum.SysRole

    }
    class ModifyUserStatusCommand << (S,Aquamarine) >> {
        + ID types.Long
        + Status enum.Enable

    }
    class User << (S,Aquamarine) >> {
        + Username string
        + Password string
        + Name string
        + Mobile string
        + Email string
        + Role enum.SysRole
        + Enable enum.Enable

        + VO() module.User

    }
}
"module.Module" *-- "domain.User"


namespace repository {
    class Repository << (S,Aquamarine) >> {
        + GetByID(ctx context.Context, ID types.Long) (*domain.User, error)
        + Create(ctx context.Context, user *domain.User) error
        + GetPasswordByUsername(ctx context.Context, username string) (string, error)
        + Save(ctx context.Context, user *domain.User) error
        + FindByNameAndMobile(ctx context.Context, id types.Long, name string, mobile string, enable int64, pagination types.Pagination) ([]domain.User, int64, error)
        + GetByUsername(ctx context.Context, username string) (*domain.User, error)

    }
}
"repository.Repository" *-- "repository.Repository"

"user.Query" <|-- "repository.Repository"
"user.Repository" <|-- "repository.Repository"

namespace service {
    class Service << (S,Aquamarine) >> {
        + Repo *repository.Repository

        + Create(ctx context.Context, command *domain.CreateUserCommand) (types.Long, error)
        + ModifyUserByID(ctx context.Context, command *domain.ModifyUserCommand) error
        + ModifyUserRoleByID(ctx context.Context, command domain.ModifyUserRoleCommand) error
        + ModifyUserStatusByID(ctx context.Context, command domain.ModifyUserStatusCommand) error
        + ModifyUserPasswordByID(ctx context.Context, command domain.ChangePasswordCommand) error
        + GetByID(ctx context.Context, ID types.Long) (*domain.User, error)

    }
}
"service.Service" *-- "service.Service"


namespace user {
    interface Query  {
        + GetByUsername(ctx context.Context, username string) (*domain.User, error)
        + GetByID(ctx context.Context, ID types.Long) (*domain.User, error)

    }
    interface Repository  {
        + GetByUsername(ctx context.Context, username string) (*domain.User, error)
        + GetPasswordByUsername(ctx context.Context, username string) (string, error)

    }
    interface Service  {
        + Create(ctx context.Context, command *CreateUserCommand) (types.Long, error)
        + GetByID(ctx context.Context, ID types.Long) (*domain.User, error)

    }
    class user.CreateUserCommand << (T, #FF7700) >>  {
    }
    class user.User << (T, #FF7700) >>  {
    }
    class "domain.CreateUserCommand" as domainCreateUserCommand {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
    class "domain.User" as domainUser {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}


"user.domainCreateUserCommand" #.. "user.CreateUserCommand"
"user.domainUser" #.. "user.User"
@enduml
